## ------------------------------------------------------
## str 타입의 문자열 포맷/서식 지정
## - f-string의  { 포맷/서식 }
## - format() 메서드 { 포맷/서식 }
## ------------------------------------------------------
## 총 자릿수 지정 => {변수명:칸수}
print(f'오늘은 좋은날 {2025}!!')     # default: 지정칸수 미지정하면 입력 문자 전체 출력
print(f'오늘은 좋은날 {2025:10}!!')  # 지정칸수보다 개수가 작은 문자가 입력되면 나머지 공백 (오른쪽에 정렬됨)
print(f'오늘은 좋은날 {2025:2}!!')   # 지정칸수보다 개수가 많은 문자가 입력되면 지정칸수는 무시됨

## 정렬 => {변수명:정렬기호칸수} : {변수명:<}, {변수명:^}, {변수명:>}
print(f'오늘은 좋은날 {2025:>10}!!')  # 기본값 오른쪽 정렬
print(f'오늘은 좋은날 {2025:^10}!!')  # 기본값 오른쪽 정렬
print(f'오늘은 좋은날 {2025:<10}!!')  # 기본값 오른쪽 정렬

## 공백처리문자 => {변수명:공백처리문자정렬기호칸수} : {변수명:<}, {변수명:^}, {변수명:>}
print(f'오늘은 좋은날 {2025:>10}!!')   # 오른쪽 정렬, 공백
print(f'오늘은 좋은날 {2025:->10}!!')  # 오른쪽 정렬, 공백은 '-'로 채움
print(f'오늘은 좋은날 {2025:@^10}!!')  # 중간 정렬, 공백은 '@'로 채움

print(f'image_{1:0>4}.jpg')      # 최대 이미지 장수 1000장 1.jpg ~ 1000.jpg
print(f'image_{981:0>4}.jpg')
print(f'image_{1000:0>4}.jpg')

## 실수 자릿수 처리 => {변수명: 공백처리문자정렬기호칸 수, 소수점이하자릿수f}
##                => 칸수.소수점f : 데이터 + '.' + 소수점수 => 전체칸수
print(f'avg : {9.999999999}')
print(f'avg : {9.999999999:12.3f}') # 반올림처리됨
print(f'avg : {1.112211223:->10.3f}')
print("그림_{:0>3}.jpg, 그림_{:0>3}.jpg 저장!".format(1, 123) )