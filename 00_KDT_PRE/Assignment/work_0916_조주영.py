# ## ---------------------------------------------------------------------
# ##
# ##                             PYTHON EXAM
# ##                     제출 : work_0916_이름.py
# ##
# ## ---------------------------------------------------------------------

# -------------------------------------------------
# 1. 1부터 n까지의 합 
# 정수 n이 주어졌을 때, 1부터 n까지의 합을 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def sum_to_n(n):
    return n * (n + 1) // 2
# -------------------------------------------------
# 2. 짝수 합만 구하기 
# 1부터 n까지 중 짝수의 합을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def even_sum_to_n(n):
    return sum(i for i in range(2, n + 1, 2))
# -------------------------------------------------
# 3. 원의 넓이 
# 반지름 r과 원주율 pi(기본값 3.14159)를 받아
# 원의 넓이를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def circle_area(r, pi=3.14159):
    return pi * r * r
# -------------------------------------------------
# 4. 문자열 감싸기 
# 문자열 s를 접두어(prefix), 접미어(suffix)로 감싸서
# 반환하는 함수를 작성하세요. (기본값: '<<', '>>')
# -------------------------------------------------
def surround(s, prefix="<<", suffix=">>"):
    return f"{prefix}{s}{suffix}"

# -------------------------------------------------
# 5. 최댓값 찾기 
# 임의 개수의 숫자를 받아 최댓값을 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def max_of(*nums):
    return max(nums)
# -------------------------------------------------
# 6. 평균 구하기 
# 임의 개수의 숫자의 평균을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def mean_of(*nums):
    return sum(nums) / len(nums)
# -------------------------------------------------
# 7. 키=값 문자열 
# 키워드 인자를 받아 "key=value" 형태로 만들고
# 키 이름 기준 오름차순으로 이어붙인 문자열을 반환하세요.
# -------------------------------------------------
def kv_join(**kwargs):
    parts = [f"{k}={kwargs[k]}" for k in sorted(kwargs)]
    return "".join(parts)
# -------------------------------------------------
# 8. 필수 키 검사 
# required_keys 리스트의 키가 모두 kwargs에 존재하면 True,
# 아니면 False를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def has_required(required_keys, **kwargs):
    return all(k in kwargs for k in required_keys)
# -------------------------------------------------
# 9. 문자열 뒤집기 
# 문자열 s가 주어졌을 때, 뒤집어서 반환하는
# 함수를 작성하세요. 예: "hello" -> "olleh"
# -------------------------------------------------
def reverse_str(s):
    return s[::-1]
# -------------------------------------------------
# 10. 리스트 합계 
# 정수 리스트 nums가 주어졌을 때,
# 모든 원소의 합을 반환하는 함수를 작성하세요.
# -------------------------------------------------
def list_sum(nums):
    return sum(nums)
# -------------------------------------------------
# 11. 최종 가격 계산 
# 기본 단가, 수량, 세금율, 추가 옵션, 할인율을 적용한
# 최종 금액을 계산해 반환하는 함수를 작성하세요.
# -------------------------------------------------
def final_price(unit_price, qty, tax_rate=0.0, add_options=0.0, discount_rate=0.0):
    subtotal = unit_price * qty + add_options
    discounted = subtotal * (1 - discount_rate)
    total = discounted * (1 + tax_rate)
    return total
# -------------------------------------------------
# 12. 문자열 정렬 
# 문자열 리스트를 길이 → 사전순 기준으로 정렬하는
# 함수를 작성하세요. (람다 key 사용)
# -------------------------------------------------
def sort_strings(words):
    return sorted(words, key=lambda s: (len(s), s))

print(sort_strings(['cc', 'bbb', 'aa']))
# -------------------------------------------------
# 13. 양수 제곱 리스트 
# 정수 리스트에서 양수만 추출 후 제곱하여
# 리스트로 반환하는 함수를 작성하세요.
# -------------------------------------------------
def positive_squares(nums):
    return [x * x for x in nums if x > 0]
# -------------------------------------------------
# 14. 배수 생성기 
# multiplier(n)은 입력값에 n을 곱해주는 함수를
# 반환하도록 작성하세요.
# -------------------------------------------------
def multiple(n):
    x = int(input("정수를 입력하세요: "))
    return x * n

print(multiple(3))
# -------------------------------------------------
# 15. 문자열 포맷 조합 
# template과 인자를 받아 str.format으로 결과를 반환하는
# 함수를 작성하세요.
# -------------------------------------------------
def apply_format(template, *args, **kwargs):
    return template.format(*args, **kwargs)

# -------------------------------------------------
# 16. 팩토리얼 
# 정수 n을 받아 n!을 계산하는 함수를 작성하세요.
# (음수 입력 시 예외 발생)
# -------------------------------------------------
def factorial(n):
    if n < 0:
        print("올바른 n 값을 입력하세요.")
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result
# -------------------------------------------------
# 17. 옵션 병합 
# 기본 설정 딕셔너리와 재정의 키워드를 받아
# 병합된 딕셔너리를 반환하는 함수를 작성하세요.
# -------------------------------------------------
def merge_options(defaults, **overrides):
    merged = defaults.copy()
    merged.update(overrides)
    return merged
# -------------------------------------------------
# 18. 중복 제거 후 정렬 
# 정수 리스트 nums에서 중복을 제거한 뒤
# 오름차순 정렬하여 반환하는 함수를 작성하세요.
# -------------------------------------------------
def unique_sorted(nums):
    return sorted(set(nums))
# -------------------------------------------------
# 19. 단어 개수 세기 
# 문자열 s가 주어졌을 때, 공백으로 구분된 단어의 개수를
# 세어 반환하는 함수를 작성하세요.
# -------------------------------------------------
def count_words(s):
    return len(s.split())

print(count_words("Hello, world. My name is Python."))
# -------------------------------------------------
# 20. 누적 합 리스트 
# 정수 리스트 nums가 주어졌을 때,
# 앞에서부터의 누적 합을 동일 길이의 리스트로 반환하는
# 함수를 작성하세요. 예: [1,2,3] -> [1,3,6]
# -------------------------------------------------
def prefix_sums(nums):
    total = 0
    out = []
    for x in nums:
        total += x
        out.append(total)
    return out