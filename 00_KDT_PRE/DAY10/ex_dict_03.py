## ----------------------------------------------------------------
## Dict 자료형 - 전용 메서드(Method)
## ★ 필수 메서드 : keys(), values(), items()
## ----------------------------------------------------------------
## dict의 키만 가져오는 메서드 : keys()
## ----------------------------------------------------------------
std = {'학년': 1, '반': 5, '이름': '마징가', '번호': 10}

keys = std.keys()
print(f'키만 추출: {keys}, {type(keys)}, {len(keys)}')
## print(keys[0]) ## ★★★★ 인덱스를 사용한 접근은 ERROR 발생
## 접근 가능하게 하려면
lkeys = list(keys)
print(lkeys[0])

## => for ~ in 접근 가능
for k in keys:
    print(k, std[k], end = '\t', sep = '-')
print()
## ----------------------------------------------------------------
## dict의 값만 가져오는 메서드 : values()
## ----------------------------------------------------------------
values = std.values()
print(f'values => {type(values)}, {len(values)}개, {values}')

## ★★★★ key와 같이인덱스를 사용한 접근은 ERROR 발생
## 값을 하나씩 출력하기
for v in values:
   print(v, end = '\t')

print()

## ----------------------------------------------------------------
## dict의 (키, 값)을 tuple로 불러오는 메서드 : items()
## ----------------------------------------------------------------
items = std.items()
print(f'items => {type(items)}, {len(items)}개, {items}')

for kv in items:      ## 언팩킹 : 원소 수만큼 변수에 따로 저장
    print(kv[0], kv[1])

## 키와 값 읽을 경우 for ~ in 반복문 / ★★★ key value 나눠서 받기 가능!
for k, v in items:      ## 언팩킹 : 원소 수만큼 변수에 따로 저장
    print(k, v)