## --------------------------------------------------------
## 객체지향언어(OOP) 특성 - 다형성
##
## - 함수/메서드 오버로딩(OVerloading)
## - 함수 이름은 동일하지만 매개변수/파라미터 개수, 타입이 다르면
##   다른 함수로 인식 가능
## --------------------------------------------------------
## 클래스 정의: 한국 사람 데이터 타입 정의
## 클래스 이름: KoreanPeople
## 속      성: 나이, 이름, 성별, 주민번호, 국적
##            인스턴스 속성  => 나이, 이름, 성별, __주민번호
##            클래스 속성   => 국적
## 메  서  드: 정보 출력하기 => 인스턴스 메서드
##            비공개 나이계산 가능 => __인스턴스 메서드
## --------------------------------------------------------
class KoreanPeople:
    ## 클래스 속성/변수
    NATL = 'KO'

    ## 인스턴스 생성 및 속성 초기화 메서드
    def __init__(self, name_, age_, gender_, jumin_):
        self.name = name_
        self.age = age_
        self.gender = gender_
        self.__jumin = jumin_    ## ★★ 외부 접근 불가

    ## 인스턴스 메서드 => 공개, 개인정보 출력
    def print_info(self):
        print('*' * 20)
        print(f'이   름: {self.name}')
        print(f'나   이: {self.age}')
        print(f'성   별: {self.gender}')
        print(f'주민번호: {self.__jumin}')
        print('*' * 20)

    ## 연산자 메서드 오버로딩 => 매개변수 타입, 개수 다른 메서드
    ## 각 객체/인스턴스 나이를 덧셈 후 반환
    def __add__(a, b):    ## 연산자 괄호 안에 (self, other) 해도 됨
        print("__add__()")
        return a.age + b.age

## --------------------------------------------------------
## 속성과 메서드 활용
## --------------------------------------------------------
## 객체/인스턴스 생성
hong = KoreanPeople("홍길동", 20, '남자', '051020-3000000')
ma   = KoreanPeople("마징가", 5, '남자', '201017-3000000')

num1 = list([11, 22, 33])
num2 = list([5, 7, 9])
print("list 객체/인스턴스 덧셈", num1 + num2)
print()
## KoreanPeople 객체/인스턴스 연산 수행
## => 덧셈 연산 : 각 객체/인스턴스 나이를 덧셈 후 반환
## => TypeError: unsupported operand type(s) => 연산자 오버로딩 추가
print("객체/인스턴스 덧셈", hong + ma)
