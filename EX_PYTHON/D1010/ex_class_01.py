## --------------------------------------------------------
## 클래스 정의
## - 사물이 가진 고유의 특징 (외형, 성질, 기능, 역할)
## - 을 묶어 놓은 정의서
## - 클래스 기반으로 메모리 힙 영역에 데이터가 저장
## - 구성: 속성/필드 --- 데이터 즉, 변수
##        기능/메서드 --- 함수
## --------------------------------------------------------
## 클래스 정의: 자동차
## 클래스 이름: Car
## 클래스 속성 (attribute): 바퀴, 차번호, 색상, 종류, 주유
##                        무게, 길이, 너비
## 클래스 메서드 (method): 전진한다, 후진한다, 정지한다
## --------------------------------------------------------
class Car:
    ## ---------------------------------------------------
    #- 자동차 속성들 중 공통되는 속성들: 클래스 속성
    #- 사용법: 클래스이름.클래스변수
    #         객체/인스턴스변수명.클래스변수
    ## ---------------------------------------------------
    weight = 1000
    height = 700
    width = 1000

    ## ---------------------------------------------------
    #- 객체/인스턴스 메모리 힙 저장을 위한 메모리 스캔 및 할당
    #- __init__() 메서드 호출함
    #- 매개변수 cls: 클래스 정보
    ## ---------------------------------------------------
    # def __new__(cls):
    #     print('__new__()')
    #     obj = super().__new__(cls)
    #     print(f'obj => {id(obj)}')
    #     return obj

    ## ---------------------------------------------------
    #- 객체/인스턴스 속성 초기화 메서드
    #- 클래스이름() 메서드 : Car()
    ## ---------------------------------------------------
    #- 객체/인스턴스마다 고유의 값을 가지는 속성/변수: 인스턴스 속성/변수
    def __init__(self, car_no, color, car_type, kind):
        print('__init__()')
        print(f'self => {id(self)}')
        self.car_no = car_no
        self.color = color
        self.car_type = car_type
        self.kind = kind
        #self.weight = weight
        #self.height = height
        #self.width = width

    ## ---------------------------------------------------
    #- 인스턴스 메서드
    #- 인스턴스 속성들을 사용하는 메서드
    #- 인스턴스 생성해야만 사용 가능한 메서드
    ## ---------------------------------------------------

    #- 자동차의 기능/역할들 => 함수
    def go(self, where):
        print(f'{self.car_no} 자동차가 {where}(으)로 간다.')
        print(f'{self.color} 자동차가 {where}(으)로 간다.')
    def back(self):
        print(f'{self.car_no} 자동차 후진')
        print(f'{self.color} 자동차 후진')
    def stop(self):
        print(f'{self.car_no} 자동차 정지')

## --------------------------------------------------------
## 클래스 기반 객체/인스턴스 생성 : 생성자 (constructor) 메서드
## - 문법: 변수명 = 클래스 이름()
## --------------------------------------------------------
#myCar = Car()     ## 인스턴스가 생성될 때마다 
                   ## 인터프리터가 자동으로 __new__ 호출함.
                   ## (1) => __new__
                   ## Heap에 Car 클래스의 속성과 메서드 저장
                   ## 가능 공간을 스캔한다.
                   ## 메모리 힙의 주소를 self에 저장해서 전달
                   ## (2) => __init__(self)가 호출되고
                   ## 전달 받은 self를 사용해서 지정된 메모리
                   ## 힙에 저장 및 초기화 진행

myCar = Car('12가 1212', 'red', '하이브리드', '세단')
herCar = Car('117도 7442', 'navy', '전기', 'SUV')
hisCar = Car('48나 4885', 'blue', '가솔린', '세단')

## --------------------------------------------------------
## 객체/인스턴스의 속성 및 메서드 사용
## - 문법: 객체/인스턴스_변수명.속성명
##        객체/인스턴스_변수명.메소드명()
## --------------------------------------------------------
myCar.go('바다')
hisCar.go('마을')